swagger: "2.0"
info:
  description: "This is the API documentation for the newsletter microservice."
  version: "1.0.0"
  title: "Newsletter Microservice"
# host: "petstore.swagger.io"
# basePath: "/v2"
tags:
- name: "news"
  description: "Accessible routes for news"
schemes:
- "http"
paths:
  /news/newsletter:
    post:
      tags:
      - "news"
      summary: "Add a new newsletter"
      description: ""
      operationId: "PostNewsletter"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Newsletter object to add"
        required: true
        schema:
          $ref: "#/definitions/Newsletter"
      responses: 
        400:
          description: "Invalid input"
        200: 
          description: "Successful"
    put:
      tags:
      - "news"
      summary: "Update an existing newsletter"
      operationId: "UpdateNewsletter"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Newsletter object to update"
        required: true
        schema:
          $ref: "#/definitions/Newsletter"
      responses: 
        400:
          description: "Invalid input"
        404:
          description: "Newsletter not found"
        200: 
          description: "Successful"
  /news/newsletters:
    get:
      tags:
      - "news"
      summary: "Lists all available newsletters"
      description: "Returns list of all available newsletters"
      operationId: "GetNewsletters"
      produces:
      - "application/json"
      responses: 
        204:
          description: "List is empty"
        200: 
          description: "Successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Newsletter"
  /news/newsletter/{newsletterId}:
    get:
      tags:
      - "news"
      summary: "Find a newsletter by id"
      description: "Returns a single newsletter"
      operationId: "GetNewsletterById"
      produces:
      - "application/json"
      parameters:
      - name: "newsletterId"
        in: "path"
        description: "ID of newsletter to return"
        required: true
        type: "string"
        format: "bson.ObjectId"
      responses: 
        404:
          description: "Newsletter not found"
        200: 
          description: "Successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Newsletter"
    delete:
      tags:
      - "news"
      summary: "Deletes a newsletter"
      description: ""
      operationId: "DeleteNewsletterById"
      produces:
      - "application/json"
      parameters:
      - name: "newsletterId"
        in: "path"
        description: "ID of newsletter to return"
        required: true
        type: "string"
        format: "bson.ObjectId"
      responses:
        200:
          description: "Successfull"
        404:
          description: "Newsletter not found"
  /news/newsletters/upcoming:
    get:
      tags:
      - "news"
      summary: "Lists all newsletter where the enddate is in the future"
      description: "Returns a list of all upcoming newsletter"
      operationId: "GetUpcomingNewsletters"
      produces:
      - "application/json"
      responses: 
        204:
          description: "List is empty"
        200: 
          description: "Successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Newsletter"
definitions:
  Newsletter:
    type: "object"
    properties:
      id: 
        type: "string"
        format: "bson.ObjectId"
      Beschreibung:
        type: "string"
      BeschreibungEnglisch:
        type: "string"
      Enddatum:
        type: "string"
        format: "date-time"
      Person:
        type: "string"
      Startdatum:
        type: "string"
        format: "date-time"
      Titel:
        type: "string"
      TitelEnglisch:
        type: "string"
      Verdatum:
        type: "string"
        format: "date-time"
externalDocs:
  description: "See code repository for more information"
  url: "https://github.com/oloose/newsletter-ms"